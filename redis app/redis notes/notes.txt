# Redis Design Methodology
> Figure out what queries we need to answer
> Structure data to best answer those queries
> Quite opposite to SQL database design methodology

# Design Considerations
> What type of data are we storing ?
> Should we be concerned about the size of data ?
> Do we need to expire this data ?
> What will the key naming policy be for this data ?
> Any business-logic concern ?

# Key-naming 
> Keys need to be unique
> Other engineers should understand what a key is for
> Use functions to generate key names so we never make a typo
> Extremely common practice is to use a ':' to separate different parts of the key
    user:45         items:19
    users:posts:901 posts:jkfs10djf

    users#20    items#19 [using # symbol instead of a : before unique identifier ]

    ## for our page cache
    pagecache#/about
    pagecache#/auth/signin

# Serialize and deserialize before and after redis operation

# datetime in seconds or milliseconds for ease (serialize and deserialize this )

# Fetch multiple items hash records like get all the items
> Option1: Loop over ids and fetch one at a time (dont do this) - hGetAll one by one for all the data
-> This is not efficient at all

> Option2: Pipelining: Take a bunch of different commands and load in a single command then execute that command
-> Loop through all the ids fetching one at a tme but dont send those commands yet 
-> After batching all commands send all those queued up commands

In node js use Promise.all([
    //hgetall
])